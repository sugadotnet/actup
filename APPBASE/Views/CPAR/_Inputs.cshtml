@model APPBASE.Models.CPAR_DetailVM
@using APPBASE.Helpers
@using APPBASE.Svcbiz

@{string vsErrClass = "";}
@{string vsDisableButton = "";}
@{Boolean isShowDropdown = true;}
@{string vsReadonlyTextboxKey = "Readonly";}
@{string vsReadonlyTextboxCPAR_DT = "Readonly";}
@{string vsReadonlyTextbox = "";}
@if (ViewBag.CRUD_type == hlpFlags_CRUDOption.CREATE) { vsReadonlyTextboxKey = ""; vsReadonlyTextboxCPAR_DT = ""; }
@if ((ViewBag.CRUD_type == hlpFlags_CRUDOption.VIEW) || (ViewBag.CRUD_type == hlpFlags_CRUDOption.DELETE)) { vsDisableButton = "disabled"; vsReadonlyTextbox = "Readonly"; isShowDropdown = false; }
@{string vsDateFormat = "'alias': 'dd/mm/yyyy'";}



<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["CPAR_ID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="CPAR_ID">No.CPAR</label>
            <input type="text" id="CPAR_ID" name="CPAR_ID" value="@Html.DisplayFor(model => model.CPAR_ID)" class="form-control" readonly />

            @if (ViewData.ModelState["CPAR_ID1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_ID1")
                    </label>
            }
            @if (ViewData.ModelState["CPAR_ID2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_ID2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->


<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["CPAR_SUBTYPE0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="CPAR_SUBTYPE">Kategori CPAR</label>
            @if (!isShowDropdown)
            {

                Html.HiddenFor(Model => Model.CPAR_SUBTYPE);
                <input type="text" id="CPAR_SUBTYPE_NM" name="CPAR_SUBTYPE_NM" value="@Html.DisplayFor(model => model.CPAR_SUBTYPE_NM)" class="form-control" readonly />
            }
            else
            {
                <select class="form-control" id="CPAR_SUBTYPE" name="CPAR_SUBTYPE" >
                    @if (Model.CPAR_SUBTYPE_LOV != null)
                    {
                        if (Model.CPAR_SUBTYPE_LOV.Count > 0)
                        {
                            foreach (var item in Model.CPAR_SUBTYPE_LOV)
                            {
                                if (Model.CPAR_SUBTYPE != null)
                                {
                                    if (Model.CPAR_SUBTYPE == item.RUID)
                                    { <option value="@item.RUID" selected>@item.LOV_NM</option> }
                                    else
                                    { <option value="@item.RUID">@item.LOV_NM</option> }
                                }
                                else
                                { <option value="@item.RUID">@item.LOV_NM</option> }

                            }
                        }
                    }
                </select>
            }
            

            @if (ViewData.ModelState["CPAR_SUBTYPE1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_SUBTYPE1")
                    </label>
            }
            @if (ViewData.ModelState["CPAR_SUBTYPE2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_SUBTYPE2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

<div class="row">
    @Html.HiddenFor(model => model.AUDITOR_RUID, new { id = "AUDITOR_RUID" })
    <div class="col-xs-12">
        @if (ViewData.ModelState["AUDITOR_RUID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="AUDITOR_NM">Penemu/Auditor</label>


            <div class="input-group input-group-sm">
                <input type="text" id="AUDITOR_NM" name="AUDITOR_NM" value="@Html.DisplayFor(model => model.AUDITOR_NM)" class="form-control" readonly />
                <span class="input-group-btn">
                    <button type="button" id="cmdLookupAUDITOR_NM" name="cmdLookupAUDITOR_NM" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                </span>
            </div><!-- /input-group -->

            
            @if (ViewData.ModelState["AUDITOR_RUID1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("AUDITOR_RUID1")
                    </label>
            }
            @if (ViewData.ModelState["AUDITOR_RUID2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("AUDITOR_RUID2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

@if (ViewBag.CPAR_TYPE == valFLAG.FLAG_CPAR_TYPE_CC)
{
    <div class="row">
        <div class="col-xs-12">
            <div class="form-group">
                <label for="COMPLAIN_CLIENTRUID">Nama Owner</label>
                <input type="text" id="COMPLAIN_CLIENTRUID" name="COMPLAIN_CLIENTRUID" value="@Html.DisplayFor(model => model.COMPLAIN_CLIENTRUID)" class="form-control" readonly />
            </div> <!-- /.form-group -->
        </div> <!-- /.col-xs-12 -->
    </div><!-- /.row -->
}

<div class="row">
    @Html.HiddenFor(model => model.AUDITEE_RUID, new { id = "AUDITEE_RUID" })
    <div class="col-xs-12">
        @if (ViewData.ModelState["AUDITEE_RUID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="AUDITEE_NM">Ditujukan/Auditee</label>


            <div class="input-group input-group-sm">
                <input type="text" id="AUDITEE_NM" name="AUDITEE_NM" value="@Html.DisplayFor(model => model.AUDITEE_NM)" class="form-control" readonly />
                <span class="input-group-btn">
                    <button type="button" id="cmdLookupAUDITEE_NM" name="cmdLookupAUDITEE_NM" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                </span>
            </div><!-- /input-group -->

            
            @if (ViewData.ModelState["AUDITEE_RUID1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("AUDITEE_RUID1")
                    </label>
            }
            @if (ViewData.ModelState["AUDITEE_RUID2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("AUDITEE_RUID2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

<div class="row">
    @Html.HiddenFor(model => model.AUDIT_RUID, new { id = "AUDIT_RUID" })
    <div class="col-xs-12">
        @if (ViewData.ModelState["AUDIT_RUID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="AUDIT_NM">Proses Audit</label>


            <div class="input-group input-group-sm">
                <input type="text" id="AUDIT_NM" name="AUDIT_NM" value="@Html.DisplayFor(model => model.AUDIT_NM)" class="form-control" readonly />
                <span class="input-group-btn">
                    <button type="button" id="cmdLookupAUDIT_NM" name="cmdLookupAUDIT_NM" class="btn btn-info btn-flat" data-toggle="modal" data-target="#DialogLookup" @vsDisableButton><i class="fa fa-search"></i></button>
                </span>
            </div><!-- /input-group -->

            
            @if (ViewData.ModelState["AUDIT_RUID1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("AUDIT_RUID1")
                    </label>
            }
            @if (ViewData.ModelState["AUDIT_RUID2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("AUDIT_RUID2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["CPAR_DT0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="CPAR_DT">Tanggal Temuan</label>
            <input type="text" id="CPAR_DT" name="CPAR_DT" value="@Html.DisplayFor(model => model.CPAR_DT)" class="form-control" @vsReadonlyTextboxCPAR_DT data-inputmask="@vsDateFormat" data-mask />

            
            @if (ViewData.ModelState["CPAR_DT1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_DT1")
                    </label>
            }
            @if (ViewData.ModelState["CPAR_DT2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_DT2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["CPAR_FINISH_DT0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="CPAR_FINISH_DT">Batas Tanggal Penyelesaian</label>
            <input type="text" id="CPAR_FINISH_DT" name="CPAR_FINISH_DT" value="@Html.DisplayFor(model => model.CPAR_FINISH_DT)" class="form-control" readonly data-inputmask="@vsDateFormat" data-mask />

            
            @if (ViewData.ModelState["CPAR_FINISH_DT1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_FINISH_DT1")
                    </label>
            }
            @if (ViewData.ModelState["CPAR_FINISH_DT2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_FINISH_DT2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["CPAR_DESC0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="CPAR_DESC">Temuan/Ketidak Sesuaian/Potensi Masalah [Max: @valFLAG.FLAG_MAXLENGTH_DESCLONG Character]</label>
            <textarea id="CPAR_DESC" name="CPAR_DESC" class="form-control" maxlength="@valFLAG.FLAG_MAXLENGTH_DESCLONG" @vsReadonlyTextbox>@Html.DisplayFor(model => model.CPAR_DESC)</textarea>


            @if (ViewData.ModelState["CPAR_DESC1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_DESC1")
                    </label>
            }
            @if (ViewData.ModelState["CPAR_DESC2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CPAR_DESC2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

@if (ViewBag.CPAR_TYPE == valFLAG.FLAG_CPAR_TYPE_IA)
{

<div class="row">
    <div class="col-xs-12">
        @if (ViewData.ModelState["CLASS_RUID0"] != null) { vsErrClass = "has-error"; } else { vsErrClass = ""; }
        <div class="form-group @vsErrClass">
            <label for="CLASS_RUID">Kategori Temuan</label>
            @if (!isShowDropdown)
            {

                Html.HiddenFor(model => model.CLASS_RUID);
                <input type="text" id="CLASS_NM" name="CLASS_NM" value="@Html.DisplayFor(model => model.CLASS_NM)" class="form-control" readonly />
            }
            else
            {
                <select class="form-control" id="CLASS_RUID" name="CLASS_RUID" >
                    @if (Model.CLASS_RUID_LOV != null)
                    {
                        if (Model.CLASS_RUID_LOV.Count > 0)
                        {
                            foreach (var item in Model.CLASS_RUID_LOV)
                            {
                                if (Model.CLASS_RUID != null)
                                {
                                    if (Model.CLASS_RUID == item.RUID)
                                    { <option value="@item.RUID" selected>@item.LOV_NM</option> }
                                    else
                                    { <option value="@item.RUID">@item.LOV_NM</option> }
                                }
                                else
                                { <option value="@item.RUID">@item.LOV_NM</option> }

                            }
                        }
                    }
                </select>
            }
            

            @if (ViewData.ModelState["CLASS_RUID1"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CLASS_RUID1")
                    </label>
            }
            @if (ViewData.ModelState["CLASS_RUID2"] != null)
            {
                    <label class="control-label" for="inputError">
                    <i class="fa fa-times-circle-o"></i> @Html.ValidationMessage("CLASS_RUID2")
                    </label>
            }
        </div> <!-- /.form-group -->
    </div> <!-- /.col-xs-12 -->
</div><!-- /.row -->

            Html.RenderPartial("~/Views/CPAR/_Inputs_stdreff.cshtml");

}
